{"version":3,"sources":["app/boot.coffee","app/config.coffee","app/controllers/example-controller.coffee","app/controllers/offer/new.coffee","app/helpers.coffee","app/initialize.coffee","app/validators.coffee","core/bootstrap.coffee","core/controller.coffee","core/view.coffee"],"names":[],"mappings":"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","file":"../priv/static/javascripts/app.js","sourcesContent":["#--------------------------------------------------------------------------\n# Boot\n#--------------------------------------------------------------------------\n#\n# It's the right place to put some code to execute globally like \n# the init of jQuery plugins, etc.\n##\n$(\"#trigger-modal\").animatedModal\n  color: '#F0F1F5'\n  animatedIn: 'lightSpeedIn'\n  animatedOut: 'bounceOutDown'\n\n","#--------------------------------------------------------------------------\n# Config\n#--------------------------------------------------------------------------\n#\n# Sometimes you need to put some configuration variables for your project,\n# here it's the right place for that !\n#\n# Config = require 'config'\n# console.log Config.app.name  \n##\n\nmodule.exports =\n\n  # Example\n  app:\n    name: 'My Gotham Application'\n    version: 0.1\n","#--------------------------------------------------------------------------\n# Example Controller\n#--------------------------------------------------------------------------\n#\n# That controller is just an example.\n#\n# @see http://gothamjs.io/documentation/1.0.0/controllers\n##\n\n# Require the controller library of Gotham\nController = require 'core/controller'\n\n\nclass Example extends Controller\n\n  ##\n  # Before\n  #\n  # Executed before the run action. You can use\n  # @stop() in this method to stop the execution\n  # of the controller\n  #\n  ##\n  before: ->\n\n  ##\n  # Run\n  #\n  # The main entry of the controller.\n  # Your code start here\n  #\n  ##\n  run: ->\n\n\n# Export\nmodule.exports = Example\n","# Require the controller library of Gotham\nController = require 'core/controller'\n\n\nclass OfferNew extends Controller\n\n  ##\n  # Before\n  #\n  # Executed before the run action. You can use\n  # @stop() in this method to stop the execution\n  # of the controller\n  #\n  ##\n  before: ->\n\n    @initBirthdayMask()\n\n  ##\n  # Run\n  #\n  # The main entry of the controller.\n  # Your code start here\n  #\n  ##\n  run: ->\n\n  initBirthdayMask: =>\n\n    console.log $('#offer_birthday').inputmask('99/99/9999', {placeholder: \"jj/mm/aaaa\"})\n\n# Export\nmodule.exports = OfferNew\n","#--------------------------------------------------------------------------\n# Helpers\n#--------------------------------------------------------------------------\n#\n# If you need to create some functions to use in your application, you are\n# in the right place !\n#\n# Gotham uses lo-dash and the concept of mixins.\n#\n# @see http://gothamjs.iodocumentation/1.0.0/helpers\n##\n\n##\n# Example\n#\n# Check if the user is batman\n#\n# @param [string] Name of the user\n##\n_.mixin isBatman: (name) ->\n\n  if name.toLowerCase() is \"batman\"\n    return true\n\n  return false\n","#--------------------------------------------------------------------------\n# Initialize\n#--------------------------------------------------------------------------\n#\n# It's the main entry of your gotham application. We will require the\n# bootstrap file and run gotham.\n##\nBootstrap = require 'core/bootstrap'\n\n# Hey sir, is the document ready ?\n$ ->\n\n  # Yep ! We will run gotham !\n  bootstrap = new Bootstrap()\n  bootstrap.run()\n","#--------------------------------------------------------------------------\n# Errors\n#--------------------------------------------------------------------------\n#\n# If you want to change / add errors for the Validator library, you can\n# do it here.\n#\n# @see http://gothamjs.io/documentation/1.0.0/validator#custom-error\n##\nValidator.errors\n\n#--------------------------------------------------------------------------\n# Attributes\n#--------------------------------------------------------------------------\n#\n# If you want to change / add attributes for the Validator library, you can\n# do it here.\n#\n# @see http://gothamjs.io/documentation/1.0.0/validator#change-attributes\n##\nValidator.attributes\n","##\n# Bootstrap\n#\n# Skeleton of gotham\n##\nclass Bootstrap\n\n  ##\n  # Run\n  #\n  # Load the helpers, start, and invoke the controller\n  ##\n  run: ->\n\n    # Load lo-dash helpers\n    require 'helpers'\n\n    # Load custom validators\n    require 'validators'\n\n    # Load boot\n    require 'boot'\n\n    # Fetch the controller to execute\n    controller = $('#app').data('controller')\n\n    # No controller defined\n    unless controller?\n      return\n\n    # Controller defined is empty\n    if _.isEmpty(controller)\n      return\n\n    # Format to the right path\n    pathController = @_formatPath(controller)\n\n    # Invoke controller\n    controller = require 'controllers/' + pathController\n    controller  = new controller($('#app').data())\n\n    # Check if we have a method before\n    if controller['before']?\n\n      # Run the before method\n      controller.before()\n\n    unless controller._gothamStop\n\n      # Run the controller\n      controller.run()\n\n  ##\n  # Format path\n  #\n  # Will replace all dots by a slash\n  #\n  # @param [String] The string to format\n  #\n  ##\n  _formatPath: (str) ->\n\n    str.split('.').join('/')\n\n\nmodule.exports = Bootstrap","View = require 'core/view'\n\n##\n# Controller\n#\n# Basic controller structure.\n##\nclass Controller\n\n  # Flag to know if we must run or not the controller\n  # It's linked with the before() method.\n  _gothamStop: false\n\n  ##\n  # Constructor\n  #\n  # The constructor\n  #\n  ##\n  constructor: (options) ->\n\n    @options = options\n\n  ##\n  # Stop\n  #\n  # If we call this method in the before method,\n  # it will not execute the run() method\n  #\n  ##\n  stop: ->\n\n    @_gothamStop = true\n\n  ##\n  # Log\n  #\n  # Shortcut to display a console.log\n  #\n  # @param [Mixed] Value to display\n  #\n  ##\n  log: (value) ->\n\n    console.log(value)\n\n  ##\n  # On\n  #\n  # Shortcut to create a jquery \"on\" event\n  #\n  # @param [String] Trigger to listen (Ex. click)\n  # @param [String] The selector to attach\n  # @param [Function] The callback\n  #\n  ##\n  on: (trigger, selector, handler) ->\n\n    $(selector).on trigger, handler\n\n  ##\n  # Off\n  #\n  # Shortcut to create a jquery \"off\" event\n  #\n  # @param [String] Trigger to shutdown (Ex. click)\n  # @param [String] The selector attached\n  # @param [Function] The handler\n  #\n  ##\n  off: (trigger, selector, handler) ->\n\n    $(selector).off trigger, handler\n\n  ##\n  # Delayed\n  #\n  # Like \"on\" jquery event but listen new elements\n  # added in the page\n  #\n  # @param [String] Trigger to listen (Ex. click)\n  # @param [String] The selector to attach\n  # @param [Function] The callback\n  #\n  ##\n  delayed: (trigger, selector, handler) ->\n\n    $(document).on trigger, selector, handler\n\n  ##\n  # View\n  #\n  # Shortcut to render a view\n  #\n  # @param [String] View to render\n  # @param [Object] Datas to compile in the view\n  #\n  ##\n  view: (template, datas) ->\n\n    view = new View()\n\n    return view.render template, datas\n\nmodule.exports = Controller\n","##\n# View\n#\n# Micro-Facade for Handlebars.\n##\nclass View\n\n  ##\n  # Constructor\n  #\n  # The constructor\n  #\n  ##\n  constructor: ->\n\n  ##\n  # Render\n  #\n  # Render a template\n  #\n  # @param [String] Template to compile\n  # @param [Object] Datas to compile with the template\n  #\n  ##\n  render: (template, datas) ->\n\n    template = template.split('.').join('/')\n\n    template = require 'views/' + template\n\n    return template(datas)\n\nmodule.exports = View\n"]}